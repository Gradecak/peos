/*
		A basic implementation of the JDialog class.
*/

import java.io.*;
import java.awt.*;
import javax.swing.*;

public class execSysCommand extends javax.swing.JDialog
{
    private int retCode;
    private boolean bEdit = true;
    
	public execSysCommand(Frame parent)
	{
		super(parent);
		
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(null);
		setSize(386,384);
		setVisible(false);
		JScrollPane1.setOpaque(true);
		getContentPane().add(JScrollPane1);
		JScrollPane1.getViewport().setFont(new Font("MonoSpaced", Font.PLAIN, 12));
		JScrollPane1.setBounds(12,120,360,180);
		JScrollPane1.getViewport().add(JTextArea1);
		JTextArea1.setFont(new Font("MonoSpaced", Font.PLAIN, 12));
		JTextArea1.setBounds(0,0,357,177);
		JTextArea1.setEditable(false);
		JTextArea1.setWrapStyleWord(true);
		JTextArea1.setLineWrap(true);
		JLabel1.setText("Output:");
		getContentPane().add(JLabel1);
		JLabel1.setFont(new Font("MonoSpaced", Font.BOLD, 12));
		JLabel1.setBounds(12,96,120,21);
		JLabel2.setText("Waiting for finishing the execution...");
		getContentPane().add(JLabel2);
		JLabel2.setFont(new Font("MonoSpaced", Font.ITALIC, 12));
		JLabel2.setBounds(12,312,228,28);
		JLabel2.setVisible(false);
		JButton1.setText("Close");
		JButton1.setActionCommand("jbutton");
		JButton1.setMnemonic((int)'C');
		getContentPane().add(JButton1);
		JButton1.setFont(new Font("MonoSpaced", Font.BOLD, 12));
		JButton1.setBounds(146,312,94,24);
		JButton1.setVisible(false);
		JTextField1.setEnabled(false);
		getContentPane().add(JTextField1);
		JTextField1.setFont(new Font("MonoSpaced", Font.PLAIN, 12));
		JTextField1.setBounds(12,36,360,24);
		JExecLable.setText("Executing Command:");
		getContentPane().add(JExecLable);
		JExecLable.setFont(new Font("MonoSpaced", Font.BOLD, 12));
		JExecLable.setBounds(12,12,128,24);
		JButtonEdit.setText("Edit");
		JButtonEdit.setActionCommand("Edit");
		getContentPane().add(JButtonEdit);
		JButtonEdit.setFont(new Font("MonoSpaced", Font.BOLD, 12));
		JButtonEdit.setBounds(146,72,94,24);
		JButton1.setEnabled(false);
		//}}
	    
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		JButton1.addActionListener(lSymAction);
		JButtonEdit.addActionListener(lSymAction);
		//}}
	}

	public execSysCommand()
	{
		this((Frame)null);
	}

	public execSysCommand(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height);
	}
	// Used by addNotify
	boolean frameSizeAdjusted = false;
    
    public int getExitCode()
    {
        return retCode;
    }
    
    public void Exec(String procID, String cmd)
    {
        setTitle(procID);
		JTextField1.setText(cmd );
		ExecCmd(cmd);
	}	
    private void ExecCmd(String cmd)
    {
        try
        {
            Process proc = Runtime.getRuntime().exec(cmd);
            BufferedReader is = new BufferedReader(new InputStreamReader(proc.getInputStream()));
			String line;
            while ((line = is.readLine()) != null)
            {
				JTextArea1.append(line);
            }
		    JLabel2.setVisible(true);
            Dimension sz = JLabel2.getSize();
		    JLabel2.paintImmediately(0, 0, sz.width, sz.height);
            proc.waitFor();
            retCode = proc.exitValue();
            Integer iRet = new Integer(retCode);
			String msg = new String("\nReturn code is "+iRet.toString()+". Press <Close> to continue.");
			JTextArea1.append(msg);
        }
        catch (Exception e)
        {
            String msg = new String("Get exception "+e+"\nCannot preceed. Press <Close> to continue.");
            JTextArea1.setText(msg);
        }
        finally
        {
		    JLabel2.setVisible(false);
            Dimension sz = JLabel2.getSize();
		    JLabel2.paintImmediately(0, 0, sz.width, sz.height);
    		JButton1.setEnabled(true);
		    JButton1.setVisible(true);
        }
    }

	//{{DECLARE_CONTROLS
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JTextArea JTextArea1 = new javax.swing.JTextArea();
	javax.swing.JLabel JLabel1 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JButton JButton1 = new javax.swing.JButton();
	javax.swing.JTextField JTextField1 = new javax.swing.JTextField();
	javax.swing.JLabel JExecLable = new javax.swing.JLabel();
	javax.swing.JButton JButtonEdit = new javax.swing.JButton();
	//}}


	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == JButton1)
				JButton1_actionPerformed(event);
			else if (object == JButtonEdit)
				JButtonEdit_actionPerformed(event);
			
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == execSysCommand.this)
				exeSysCommand_windowClosing(event);
		}
	}

	void exeSysCommand_windowClosing(java.awt.event.WindowEvent event)
	{
		try {
			// JLoginDialog Hide the JLoginDialog
			this.setVisible(false);
		} catch (Exception e) {
			String msg = "Get exception: " + e;
            JOptionPane.showMessageDialog(this, msg, "execSysCommand",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JButton1_actionPerformed(java.awt.event.ActionEvent event)
	{
		try {
			this.setVisible(false);
		} catch (Exception e) {
			String msg = "Get exception: " + e;
            JOptionPane.showMessageDialog(this, msg, "execSysCommand",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JButtonEdit_actionPerformed(java.awt.event.ActionEvent event)
	{
	    JTextField1.setEnabled(bEdit);
	    if (bEdit)
		{
		    bEdit = false;
		    JButtonEdit.setText("Exec");
    		JButton1.setEnabled(false);
		    JButton1.setVisible(false);
		}
		else
		{
		    bEdit = true;
		    JButtonEdit.setText("Edit");
		    ExecCmd(JTextField1.getText());
		}
	}
}