import java.awt.*;
import java.util.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.table.*;
import javax.swing.border.*;
import engineInterface.*;

/**
 * A basic JFC 1.1 based application.
 */
public class PEOS_GUI extends javax.swing.JFrame
{
    PEOS_Interface          _PEOSInterface;
	private TreePath		curTreeSelection;
	private int				curTableSelection;
	private Properties		execPath;
	private String      	doneExecPath;
	private	Hashtable		lastRetValue;
    private String          lastProcProperty;

	final static Object[] tableColNames = {"Status", "Process ID", "Task ID"};
	final static String[] retListNames = {"available", "running","finished", "error"};

	public PEOS_GUI()
	{
		_PEOSInterface = null;
		curTreeSelection = null;
		curTableSelection = 0;
		lastRetValue = null;
		doneExecPath = null;
		execPath = new Properties();
		lastProcProperty = new String();

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
		setTitle("PEOS Enactment Interface");
		setJMenuBar(JMenuBar1);
		getContentPane().setLayout(null);
		setSize(745,544);
		setVisible(false);
		JPanel1.setLayout(null);
		getContentPane().add(JPanel1);
		JPanel1.setBounds(0,0,744,540);
		JPanel2.setBorder(titledBorder1);
		JPanel2.setLayout(null);
		JPanel1.add(JPanel2);
		JPanel2.setFont(new Font("MonoSpaced", Font.BOLD, 12));
		JPanel2.setBounds(12,12,300,288);
		JCreateButton.setText("Create");
		JCreateButton.setActionCommand("Create");
		JCreateButton.setMnemonic((int)'C');
		JPanel2.add(JCreateButton);
		JCreateButton.setBounds(108,252,84,25);
		JScrollPane1.setOpaque(true);
		JPanel2.add(JScrollPane1);
		JScrollPane1.setBounds(12,24,276,216);
		JList1.setModel(stringListModel);
		JScrollPane1.getViewport().add(JList1);
		JList1.setBounds(0,0,273,213);
		JPanel3.setBorder(titledBorder2);
		JPanel3.setLayout(null);
		JPanel1.add(JPanel3);
		JPanel3.setBounds(324,12,408,516);
		JPanel3.add(JScrollPane3);
		JScrollPane3.getViewport().setFont(new Font("MonoSpaced", Font.PLAIN, 12));
		JScrollPane3.setBounds(12,24,384,306);
		JTree1.setModel(stringTreeModel1);
		JScrollPane3.getViewport().add(JTree1);
		JTree1.setBounds(0,0,381,303);
		JPanel3.add(JScrollPane4);
		JScrollPane4.setBounds(23,48,337,60);
		JRunButton.setText("Run");
		JRunButton.setActionCommand("Run");
		JRunButton.setMnemonic((int)'R');
		JRunButton.setEnabled(false);
		JPanel3.add(JRunButton);
		JRunButton.setBounds(300,348,57,25);
		JPanel3.add(JTabbedPane1);
		JTabbedPane1.setBounds(12,360,384,144);
		JTabbedPane1.addTab(new String("Execution Path"), JScrollPane5);
		JTabbedPane1.addTab(new String("PML Script"), JScrollPane6);
		JScrollPane5.setBounds(2,27,379,114);
		JScrollPane6.setBounds(2,27,379,114);
		JTextArea1.setEditable(false);
		JTextArea1.setLineWrap(true);
		JTextArea2.setEditable(false);
		JTextArea2.setLineWrap(true);
		JScrollPane5.getViewport().add(JTextArea1);
		JScrollPane6.getViewport().add(JTextArea2);
		JTextArea1.setBounds(0,0,376,111);
		JTextArea1.setVisible(true);
		JTextArea2.setBounds(0,0,376,111);
		JTextArea2.setVisible(true);
		JTabbedPane1.setSelectedIndex(0);
		JPanel4.setBorder(titledBorder3);
		JPanel4.setLayout(null);
		JPanel1.add(JPanel4);
		JPanel4.setBounds(12,312,300,216);
		JSuspendButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
		JSuspendButton.setText("Suspend");
		JSuspendButton.setActionCommand("Suspend");
		JSuspendButton.setMnemonic((int)'S');
		JSuspendButton.setEnabled(false);
		JPanel4.add(JSuspendButton);
		JSuspendButton.setBounds(12,180,84,25);
		JScrollPane2.setOpaque(true);
		JPanel4.add(JScrollPane2);
		JScrollPane2.setBounds(12,24,276,144);
		JScrollPane2.getViewport().add(JTable1);
		JTable1.setBounds(0,0,273,0);
//		JTable1.enableInputMethods(false); ?/disable editing
		JResumeButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
		JResumeButton.setText("Resume");
		JResumeButton.setActionCommand("Resume");
		JResumeButton.setMnemonic((int)'R');
		JResumeButton.setEnabled(false);
		JPanel4.add(JResumeButton);
		JResumeButton.setBounds(108,180,84,25);
		JDoneButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
		JDoneButton.setText("Done");
		JDoneButton.setActionCommand("Done");
		JDoneButton.setMnemonic((int)'D');
		JDoneButton.setEnabled(false);
		JPanel4.add(JDoneButton);
		JDoneButton.setBounds(204,180,84,25);
		//$$ JMenuBar1.move(168,552);
		connectionMenu.setText("Connection");
		connectionMenu.setActionCommand("Connection");
		connectionMenu.setMnemonic((int)'C');
		JMenuBar1.add(connectionMenu);
		connectItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK));
		connectItem.setText("Connect");
		connectItem.setActionCommand("Connect");
		connectItem.setMnemonic((int)'C');
		connectionMenu.add(connectItem);
		disconnectItem.setEnabled(false);
		disconnectItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Event.CTRL_MASK));
		disconnectItem.setText("Disconnect");
		disconnectItem.setActionCommand("Diconnect");
		disconnectItem.setMnemonic((int)'D');
		connectionMenu.add(disconnectItem);
		connectionMenu.add(JSeparator1);
		exitItem.setText("Exit");
		exitItem.setActionCommand("Exit");
		exitItem.setMnemonic((int)'X');
		connectionMenu.add(exitItem);
		optionMenu.setText("Running Mode");
		optionMenu.setActionCommand("Edit");
		optionMenu.setMnemonic((int)'R');
		JMenuBar1.add(optionMenu);
		JRadioButtonMenuItem1.setText("Run until need attention");
		JRadioButtonMenuItem1.setActionCommand("Run until need interaction");
		JRadioButtonMenuItem1.setMnemonic((int)'S');
        JRadioButtonMenuItem1.setSelected(false);
		optionMenu.add(JRadioButtonMenuItem1);
		JRadioButtonMenuItem2.setText("Signle step");
		JRadioButtonMenuItem2.setActionCommand("Single stepping");
		JRadioButtonMenuItem2.setMnemonic((int)'I');
        JRadioButtonMenuItem2.setSelected(true);
		optionMenu.add(JRadioButtonMenuItem2);
		JCheckBoxMenuItem1.setText("Strict error checking");
		JCheckBoxMenuItem1.setActionCommand("Diagnosis On");
		optionMenu.add(JCheckBoxMenuItem1);
		helpMenu.setText("Help");
		helpMenu.setActionCommand("Help");
		helpMenu.setMnemonic((int)'H');
		JMenuBar1.add(helpMenu);
		aboutItem.setText("About...");
		aboutItem.setActionCommand("About...");
		aboutItem.setMnemonic((int)'A');
		helpMenu.add(aboutItem);
		//$$ stringListModel.move(0,552);
		//$$ stringTreeModel1.move(48,552);
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		connectItem.addActionListener(lSymAction);
		disconnectItem.addActionListener(lSymAction);
		exitItem.addActionListener(lSymAction);
		aboutItem.addActionListener(lSymAction);
		JCreateButton.addActionListener(lSymAction);
		JDoneButton.addActionListener(lSymAction);
		JSuspendButton.addActionListener(lSymAction);
		JResumeButton.addActionListener(lSymAction);
		JRunButton.addActionListener(lSymAction);
		JRadioButtonMenuItem1.addActionListener(lSymAction);
		JRadioButtonMenuItem2.addActionListener(lSymAction);
		SymFocus aSymFocus = new SymFocus();
		JTree1.addFocusListener(aSymFocus);
		JTable1.addFocusListener(aSymFocus);
		SymTreeSelection lSymTreeSelection = new SymTreeSelection();
		JTree1.addTreeSelectionListener(lSymTreeSelection);
		JCheckBoxMenuItem1.addActionListener(lSymAction);
		//}}

        ButtonGroup group = new ButtonGroup();
        group.add(JRadioButtonMenuItem1);
        group.add(JRadioButtonMenuItem2);
        
		JTable1.setModel(tableModel1);
		for (int iCol = 0; iCol < tableColNames.length; iCol++)
			tableModel1.addColumn(tableColNames[iCol]);
		TableColumn sts = JTable1.getColumn(tableColNames[0]);
		TableCellRenderer renderer = sts.getHeaderRenderer();
		Component comp = renderer.getTableCellRendererComponent(
						  			JTable1, sts.getHeaderValue(), 
						  			false, false, 0, 0);
		int stsWidth = comp.getPreferredSize().width;
		sts.setMinWidth(stsWidth);
		sts.setMaxWidth(stsWidth);
		JTable1.sizeColumnsToFit(0);

	    JTree1.setRootVisible(false);
	    JTree1.setShowsRootHandles(false);
//    	JTree1.setClientProperty("JTree.lineStyle", "Angled");
//	    JTree1.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

		JTable1.setColumnSelectionAllowed(false);
		JTable1.setCellSelectionEnabled(false);
		JTable1.setRowSelectionAllowed(true);
		JTable1.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		SymTableSelection tSymTableSelection = new SymTableSelection(); 
		JTable1.getSelectionModel().addListSelectionListener(tSymTableSelection);
	}

    /**
     * Creates a new instance of PEOS_GUI with the given title.
     * @param sTitle the title for the new frame.
     * @see #PEOS_GUI()
     */
	public PEOS_GUI(String sTitle)
	{
		this();
		setTitle(sTitle);
	}
	
	/**
	 * The entry point for this application.
	 * Sets the Look and Feel to the System Look and Feel.
	 * Creates a new PEOS_GUI and makes it visible.
	 */
	static public void main(String args[])
	{
		try {
		    // Add the following code if you want the Look and Feel
		    // to be set to the Look and Feel of the native system.
		    /*
		    try {
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    } 
		    catch (Exception e) { 
		    }
		    */

			//Create a new instance of our application's frame, and make it visible.
			PEOS_GUI peos = new PEOS_GUI();
			peos.init();
			peos.setVisible(true);
		} 
		catch (Throwable t) {
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}

    /**
     * Notifies this component that it has been added to a container
     * This method should be called by <code>Container.add</code>, and 
     * not by user code directly.
     * Overridden here to adjust the size of the frame if needed.
     * @see java.awt.Container#removeNotify
     */
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();
		
		super.addNotify();
		
		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;
		
		// Adjust size of frame according to the insets and menu bar
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
		    menuBarHeight = menuBar.getPreferredSize().height;
		Insets insets = getInsets();
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel JPanel1 = new javax.swing.JPanel();
	javax.swing.JPanel JPanel2 = new javax.swing.JPanel();
	javax.swing.JButton JCreateButton = new javax.swing.JButton();
	javax.swing.JScrollPane JScrollPane1 = new javax.swing.JScrollPane();
	javax.swing.JList JList1 = new javax.swing.JList();
	javax.swing.JPanel JPanel3 = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane3 = new javax.swing.JScrollPane();
	javax.swing.JTree JTree1 = new javax.swing.JTree();
	javax.swing.JScrollPane JScrollPane4 = new javax.swing.JScrollPane();
	javax.swing.JButton JRunButton = new javax.swing.JButton();
	javax.swing.JTabbedPane JTabbedPane1 = new javax.swing.JTabbedPane();
	javax.swing.JScrollPane JScrollPane5 = new javax.swing.JScrollPane();
	javax.swing.JTextArea JTextArea1 = new javax.swing.JTextArea();
	javax.swing.JScrollPane JScrollPane6 = new javax.swing.JScrollPane();
	javax.swing.JTextArea JTextArea2 = new javax.swing.JTextArea();
	javax.swing.JPanel JPanel4 = new javax.swing.JPanel();
	javax.swing.JButton JSuspendButton = new javax.swing.JButton();
	javax.swing.JScrollPane JScrollPane2 = new javax.swing.JScrollPane();
	javax.swing.JTable JTable1 = new javax.swing.JTable();
	javax.swing.JButton JResumeButton = new javax.swing.JButton();
	javax.swing.JButton JDoneButton = new javax.swing.JButton();
	javax.swing.JMenuBar JMenuBar1 = new javax.swing.JMenuBar();
	javax.swing.JMenu connectionMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem connectItem = new javax.swing.JMenuItem();
	javax.swing.JMenuItem disconnectItem = new javax.swing.JMenuItem();
	javax.swing.JSeparator JSeparator1 = new javax.swing.JSeparator();
	javax.swing.JSeparator JSeparator3 = new javax.swing.JSeparator();
	javax.swing.JMenuItem exitItem = new javax.swing.JMenuItem();
	javax.swing.JMenu optionMenu = new javax.swing.JMenu();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JRadioButtonMenuItem JRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
	javax.swing.JCheckBoxMenuItem JCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
	javax.swing.JMenu helpMenu = new javax.swing.JMenu();
	javax.swing.JMenuItem aboutItem = new javax.swing.JMenuItem();
	javax.swing.border.TitledBorder titledBorder1 = new javax.swing.border.TitledBorder("Available Models");
	javax.swing.border.TitledBorder titledBorder2 = new javax.swing.border.TitledBorder("Available Tasks");
	javax.swing.border.TitledBorder titledBorder3 = new javax.swing.border.TitledBorder("Active Tasks");
	//}}

	StringTreeModel stringTreeModel1 = new StringTreeModel();
	StringListModel stringListModel = new StringListModel();
	PEOSTableModel tableModel1 = new PEOSTableModel();
	
	//{{DECLARE_MENUS
	//}}

	//
	void init()
	{
	    try
	    {
		    if (invokeLogin())
		    {
		        repaint();
		        _PEOSInterface.setDiagnosis(false);
		        lastRetValue = _PEOSInterface.getProcState();
		        lastProcProperty = "";
		        parseRetValHashtable(lastRetValue);
		        repaint();
		    }
	        optionMenu.setEnabled(_PEOSInterface != null);
		}
		catch (Exception e)
		{
			lastRetValue = null;
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Initialization",JOptionPane.ERROR_MESSAGE);
		}
	}
		
    boolean invokeLogin()
    {
        boolean bRet = false;
        try
        {
		    JLoginDialog dlg = new JLoginDialog();
		    dlg.setModal(true);
		    dlg.show();
		    if (!dlg._bCancel)
		    {
        	    _PEOSInterface = new PEOS_Interface(dlg.getHost(), dlg.getPort());
				_PEOSInterface.PEOS_login(dlg.getUsername(), dlg.getPassword());
                _PEOSInterface.setDiagnosis(false);		// depend on the server
                Vector modelList = _PEOSInterface.getModelList();
			    fillModelList(modelList);
				disconnectItem.setEnabled(true);
 				connectItem.setEnabled(false);
 				
 				bRet = true;
		    }
		}
		catch (Exception e)
		{
			JOptionPane.showMessageDialog(this, e, "While Login",JOptionPane.ERROR_MESSAGE);
		    bRet = false;    
		}
		finally
		{
		    return bRet;
		}
    }
   
	void exitApplication()
	{
		try {
	    	// Beep
	    	Toolkit.getDefaultToolkit().beep();
	    	// Show a confirmation dialog
	    	int reply = JOptionPane.showConfirmDialog(this, 
	    	                                          "Do you really want to exit?", 
	    	                                          "PEOS Perform Tool - Exit" , 
	    	                                          JOptionPane.YES_NO_OPTION, 
	    	                                          JOptionPane.QUESTION_MESSAGE);
			// If the confirmation was affirmative, handle exiting.
			if (reply == JOptionPane.YES_OPTION)
			{
		    	this.setVisible(false);    // hide the Frame
		    	this.dispose();            // free the system resources
		    	System.exit(0);            // close the application
			}
		} catch (Exception e) {
//			String msg = "Get exception: " + e;
//			JOptionPane.showMessageDialog(this, msg, "While exit",JOptionPane.ERROR_MESSAGE);
		}
	}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PEOS_GUI.this)
				PEOS_GUI_windowClosing(event);
		}
	}

	void PEOS_GUI_windowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
			 
		PEOS_GUI_windowClosing_Interaction1(event);
	}

	void PEOS_GUI_windowClosing_Interaction1(java.awt.event.WindowEvent event) {
		try {
		    if (_PEOSInterface != null)
    			_PEOSInterface.disconnect();
			this.exitApplication();
		} catch (Exception e) {
//			String msg = "Get exception: " + e;
//			JOptionPane.showMessageDialog(this, msg, "Close window",JOptionPane.ERROR_MESSAGE);
		}
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == disconnectItem)
				disconnectItem_actionPerformed(event);
			if (object == exitItem)
				exitItem_actionPerformed(event);
			else if (object == aboutItem)
				aboutItem_actionPerformed(event);
			else if (object == JCreateButton)
				JCreateButton_actionPerformed(event);
			else if (object == JDoneButton)
				JDoneButton_actionPerformed(event);
			else if (object == JSuspendButton)
				JSuspendButton_actionPerformed(event);
			else if (object == JResumeButton)
				JResumeButton_actionPerformed(event);
			else if (object == JRunButton)
				JRunButton_actionPerformed(event);
			else if (object == connectItem)
				connectItem_actionPerformed(event);
			else if (object == JRadioButtonMenuItem1)
				JRadioButtonMenuItem1_actionPerformed(event);
			else if (object == JRadioButtonMenuItem2)
				JRadioButtonMenuItem2_actionPerformed(event);
			else if (object == JCheckBoxMenuItem1)
				JCheckBoxMenuItem1_actionPerformed(event);
			
			
		}
	}

	void connectItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		connectItem_actionPerformed_Interaction1(event);
	}

	void connectItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JLoginDialog Create with owner and show as modal
			{
			    if (invokeLogin())
			    {
				    JList1.updateUI();
				    lastRetValue = _PEOSInterface.getProcState();
				    lastProcProperty = "";
				    displayLists(lastRetValue);
                }
			    optionMenu.setEnabled(_PEOSInterface != null);
			}
		} catch (Exception e) {
			lastRetValue = null;
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Connect",JOptionPane.ERROR_MESSAGE);
		}
	}

	void disconnectItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		disconnectItem_actionPerformed_Interaction1(event);
		// to do: code goes here.
	}

	void disconnectItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try 
		{
			_PEOSInterface.disconnect();
			_PEOSInterface = null;
	        optionMenu.setEnabled(false);
            disconnectItem.setEnabled(false);
 			connectItem.setEnabled(true);

			fillModelList(null);
			JList1.updateUI();
			displayLists(null);
		    JTextArea1.setText("");
		    JTextArea2.setText("");
			JTextArea1.updateUI();
			JTextArea2.updateUI();
		} catch (Exception e) {
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Disconnect",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	void exitItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		exitItem_actionPerformed_Interaction1(event);
	}

	void exitItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
		    if (_PEOSInterface != null)
    			_PEOSInterface.disconnect();
			this.exitApplication();
		} catch (Exception e) {
//			String msg = "Get exception: " + e;
//			JOptionPane.showMessageDialog(this, msg, "Exit",JOptionPane.ERROR_MESSAGE);
		}
	}

	void aboutItem_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutItem_actionPerformed_Interaction1(event);
	}

	void aboutItem_actionPerformed_Interaction1(java.awt.event.ActionEvent event) {
		try {
			// JAboutDialog Create with owner and show as modal
			{
				JAboutDialog JAboutDialog1 = new JAboutDialog(this);
				JAboutDialog1.setModal(true);
				JAboutDialog1.show();
			}
		} catch (Exception e) {
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "About",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JCreateButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JCreateButton_actionPerformed_Interaction1(event);
	}

	void JCreateButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			int iSel = JList1.getSelectedIndex();
			String sel = (String) stringListModel.getElementAt(iSel);
			lastRetValue = _PEOSInterface.PEOS_execModel(sel);
			lastProcProperty = "";
			displayLists(lastRetValue);
		
		} catch (java.lang.Exception e) {
			lastRetValue = null;
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Create a process",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JDoneButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JDoneButton_actionPerformed_Interaction1(event);
	}

	void JDoneButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			int idx = JTable1.getSelectedRow();
			String procID = (String) JTable1.getValueAt(idx, 1);
			String taskID = (String) JTable1.getValueAt(idx, 2);
			execCommand(new String("done"), procID, taskID);
		} catch (java.lang.Exception e) {
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Done a process",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JSuspendButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JSuspendButton_actionPerformed_Interaction2(event);
	}

	void JSuspendButton_actionPerformed_Interaction2(java.awt.event.ActionEvent event)
	{
		try {
			int idx = JTable1.getSelectedRow();
			String state = (String) JTable1.getValueAt(idx, 0);
			if (state.compareTo("Run") == 0)
			{
				execCommand(new String("suspend"), 
								(String) JTable1.getValueAt(idx, 1), 
								(String) JTable1.getValueAt(idx, 2));
			}
//??		else
//				beep;

		} catch (java.lang.Exception e) {
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Suspend a process",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JResumeButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		JResumeButton_actionPerformed_Interaction1(event);
	}

	void JResumeButton_actionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			int idx = JTable1.getSelectedRow();
			String state = (String) JTable1.getValueAt(idx, 0);
			if (state.compareTo("Susp") == 0)
			{
				execCommand(new String("run"),
								(String) JTable1.getValueAt(idx, 1), 
								(String) JTable1.getValueAt(idx, 2));
			}
//??		else
//				beep;
		} catch (java.lang.Exception e) {
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Resume a process",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JRunButton_actionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		RunTask();
	}

	void RunTask()
	{
		try {
			javax.swing.tree.TreePath path = JTree1.getSelectionModel().getSelectionPath();
		    StringTokenizer st = new StringTokenizer(path.toString(), ",[]");
			if (st.countTokens() > 2)
			{
				st.nextToken();			//the root
				String cat = st.nextToken();
				if (cat.indexOf("Available Processes") != -1)
				{
					StringTokenizer st1 = new StringTokenizer(st.nextToken(), " ");		//the proc
					String procID = st1.nextToken();
					String taskID = null;
					if (st.hasMoreTokens())
					{
						StringTokenizer st2 = new StringTokenizer(st.nextToken(), " ");	//the task
						taskID = st2.nextToken();
					}
					else
					{
						DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
						if (node.getChildCount() == 1)
							taskID = node.getChildAt(0).toString();
					}
					if (taskID != null)
					{
						execCommand(new String("run"), procID, taskID);
					}
				}
			}
		} catch (java.lang.Exception e) {
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Run a process",JOptionPane.ERROR_MESSAGE);
		}
	}

	void fillModelList(Vector models)
	{
		if (models == null)
		{
			stringListModel.removeAllElements();
			return;
		}

		String[] tempString = new String[models.size()];
		for (int i = 0; i < models.size(); i++)
		{
			tempString[i] = (String) models.elementAt(i);
		}
		stringListModel.setItems(tempString);
	}

	void fillAvailableList(Vector avail, Vector error, PEOS_Process finished)
	{
		if ((avail == null) && (error == null) && (finished == null))
		{
			((DefaultMutableTreeNode)stringTreeModel1.getRoot()).removeAllChildren();
		    return;
        }
        
		String[] indents = {"", " ", "  "};
		Vector	items = new Vector();
		if (finished != null)
		{
			items.addElement(new String(indents[0] + "Finished/Branched Process"));
			items.addElement(new String(indents[1] + finished.getProcessID())); 
			removeFromExecPath(finished.getProcessID());
		}
		PEOS_Process    proc;
		if (error != null) 
		{	
			if (error.size() > 0)
			{
				String errMsg;
				items.addElement(new String(indents[0] + "Errors in Processes"));
				for (int i = 0; i < error.size(); i++)
				{
					proc = (PEOS_Process) error.elementAt(i);
					items.addElement(new String(indents[1] + proc.getProcessID()
						+ ", " + proc.getTaskID()));
					errMsg = proc.getErrorMsg();
					items.addElement(new String(indents[2] + errMsg));
				}
			}
		}
		String  procName = new String();
		if (avail != null)
		{	
			if (avail.size() > 0)
			{
				items.addElement(new String(indents[0] + "Available Processes"));
				for (int i = 0; i < avail.size(); i++)
				{
					proc = (PEOS_Process) avail.elementAt(i);
					if (procName.compareTo(proc.getProcessID()) == 0)
						items.addElement(new String(indents[2] + proc.getTaskID()));
					else
					{
						procName = proc.getProcessID();
						items.addElement(new String(indents[1] + proc.getProcessID()));
						items.addElement(new String(indents[2] + proc.getTaskID()));
					}
				}
			}
		}
		String[] tempString = new String[items.size()];
		for (int j = 0; j < items.size(); j++)
		{
			tempString[j] = (String) items.elementAt(j);
		}
		stringTreeModel1.setItems(tempString);		//????
//		JTree1.setFont(new Font("MonoSpaced", Font.BOLD, 12));
		JTree1.getSelectionModel().clearSelection();
		curTreeSelection = null;
 	}

	void fillRunningList(Vector runs)
	{
		int rowCount = tableModel1.getRowCount();
		if (rowCount > 0)
		{
			for (int i = rowCount - 1; i >= 0; i--)
				tableModel1.removeRow(i);
		}
		if (runs != null)
		{
			if (runs.size() > 0)
			{
				PEOS_Process    proc;
				String[] tempString = new String[3];

				TableColumn col1 = JTable1.getColumn(tableColNames[1]);
				int iCol = col1.getModelIndex();
				Component comp;
				int width = 0;
				TableCellRenderer renderer = col1.getHeaderRenderer();
				comp = renderer.getTableCellRendererComponent(
						  			JTable1, col1.getHeaderValue(), 
						  			false, false, 0, 0);
				int maxwd = comp.getPreferredSize().width;
				for (int iRow = 0; iRow < runs.size(); iRow++)
				{
					proc = (PEOS_Process) runs.elementAt(iRow);
					tempString[1] = proc.getProcessID();
					tempString[2] = proc.getTaskID();
					if (proc.getState() == PEOS_Process.STS_RUNNING)
						tempString[0] = "Susp";
					else
						tempString[0] = "Run"; 
					tableModel1.addRow(tempString);
					renderer = JTable1.getCellRenderer(iRow, iCol);
					comp = renderer.getTableCellRendererComponent(
						  			JTable1, JTable1.getValueAt(iRow,iCol), 
						  			false, false, iRow, iCol);
					width = comp.getPreferredSize().width;
					maxwd = (width > maxwd) ? width : maxwd;
				}
				col1.setMinWidth(maxwd);
				JTable1.sizeColumnsToFit(0);
			}
		}
	}

	boolean useSysResource(PEOS_Process proc)
	{
		String cmd = proc.getSystemCommand();
		if (cmd == null)						
			cmd = proc.getScript();
		try
		{
			if (cmd != null)
			{
			    execSysCommand sysExec = new execSysCommand(this);
			    sysExec.Exec(proc.getProcessID(), cmd);
		        sysExec.setModal(true);
		        sysExec.show();	
			}
		}
		catch (Exception e)		
		{
			String msg = "Cannot execute command " + cmd + ". Exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "useSysResource",JOptionPane.ERROR_MESSAGE);
			cmd = null;
		}
		finally
		{
			return (cmd != null);
		}
	}

	void autoExec(String curProcID, String curTask, boolean bFirstRun)
	{
    	JTabbedPane1.setSelectedIndex(0);

		PEOS_Process    procObj = null;
		String  cmdRun = new String("run");
		String  cmdDone = new String("done");
		boolean bContinue = true;
	    String  procID = new String(curProcID);
	    String  task = new String();
	    try
	    {
			JTabbedPane1.setEnabledAt(0, true);
			JTabbedPane1.setEnabledAt(1, false);
		    while (bContinue)
		    {
		        if (procObj == null)
		            task = curTask;
		        else
			        task = procObj.getTaskID();
				if (bFirstRun || procObj != null)
				{
					bFirstRun = false;
				    lastRetValue = _PEOSInterface.PEOS_execTask(cmdRun, procID, task);
				    procObj = foundProc(retListNames[1], procID);	// in running
					useSysResource(procObj);
				}
				lastRetValue = _PEOSInterface.PEOS_execTask(cmdDone, procID, task);
				addToExecPath(procID, task);
				JTextArea1.setText(procID);
				JTextArea1.append(":\n ");
				JTextArea1.append(execPath.getProperty(procID));
				Dimension sz = JTextArea1.getSize();
				JTabbedPane1.paintImmediately(0, 0, sz.width, sz.height);
					
				procObj = foundProc(retListNames[0], procID);		// in avail
				bContinue = (procObj != null);
				if (bContinue && JCheckBoxMenuItem1.isSelected())
					if (lastRetValue.containsKey(retListNames[3])) //any other error
						bContinue = false;
		    }
		}
		catch (Exception ex)
		{
			lastRetValue = null;
			String msg = "Get exception: " + ex;
			JOptionPane.showMessageDialog(this, msg, "autorun",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	void execCommand(String cmd, String proc, String task)
	{
		try
		{
			lastProcProperty = "";
			if (JRadioButtonMenuItem2.isSelected())			//single step
			{
				lastRetValue = _PEOSInterface.PEOS_execTask(cmd, proc, task);
				if (cmd.compareTo("run") == 0)
				{
					addToExecPath(proc, task);
				    PEOS_Process procObj = foundProc(retListNames[1], proc);	// in running
					if (procObj != null)
					{
					    if (useSysResource(procObj))
            				lastRetValue = _PEOSInterface.PEOS_execTask(new String("done"), proc, task);
            		}
				}
			}
			else
				autoExec(proc, task, (cmd.compareTo("run") == 0));
			displayLists(lastRetValue);
		}
		catch (Exception e)
		{
			lastRetValue = null;
			String msg = "Get exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "Execute a PEOS command",JOptionPane.ERROR_MESSAGE);
		}
	}

	PEOS_Process foundProc(String key, String procID)
	{
		int count = 0;
		PEOS_Process proc = null;
		PEOS_Process retProc = null;
		Vector list = null;
		if (lastRetValue.containsKey(key))
		{
			list = (Vector) lastRetValue.get(key);
			for (int i = 0; i < list.size(); i++)
			{
				proc = (PEOS_Process) list.elementAt(i);
				if (proc.compareProcID(procID) == 0)
				{
				    retProc = proc;
					count++;
				}
			}
		}
		if (count == 1)
			return retProc;
		else
			return null;
	}

	void parseRetValHashtable(Hashtable retVal)
	{
		try
		{
			Object availObj = null;
			Object errObj = null;
			Object finishedObj = null; 
			if (retVal.containsKey(retListNames[0]))	//avail
				availObj = retVal.get(retListNames[0]);
			if (retVal.containsKey(retListNames[3]))	//error
				errObj = retVal.get(retListNames[3]);
			if (retVal.containsKey(retListNames[2]))
				finishedObj = retVal.get(retListNames[2]);
			fillAvailableList((Vector) availObj, 
					(Vector) errObj, (PEOS_Process) finishedObj);

			if (retVal.containsKey(retListNames[1]))
			{
				fillRunningList((Vector) retVal.get(retListNames[1]));
			}
			else
			{
				fillRunningList(null);
			}
		}
		catch (Exception e)
		{
			String msg = "Get exception: " + e;
            JOptionPane.showMessageDialog(this, msg, "Parse return" ,JOptionPane.ERROR_MESSAGE);
		}
//		JTree1.Expansion();
	}

	void displayLists(Hashtable retVal)
	{
		if (retVal != null)
		{
			parseRetValHashtable(retVal);
		}
		else
		{
			fillAvailableList(null, null, null);
			fillRunningList(null);
		}
		try
		{
			JRunButton.setEnabled(false);
			JDoneButton.setEnabled(false);
			JSuspendButton.setEnabled(false);
			JResumeButton.setEnabled(false);
	    
			JTable1.updateUI();
			JTree1.updateUI();
		}
		catch (Exception e)
		{
			String msg = "Update exception: " + e;
			JOptionPane.showMessageDialog(this, msg, "displayLists",JOptionPane.ERROR_MESSAGE);
		}
	}

	void JRadioButtonMenuItem1_actionPerformed(java.awt.event.ActionEvent event)
	{
		JRadioButtonMenuItem item = (JRadioButtonMenuItem) event.getSource(); // to do: code goes here.
		if (item.isSelected())
			_PEOSInterface.setDiagnosis(false);
	}

	void JRadioButtonMenuItem2_actionPerformed(java.awt.event.ActionEvent event)
	{
		JRadioButtonMenuItem item = (JRadioButtonMenuItem) event.getSource(); // to do: code goes here.
		_PEOSInterface.setDiagnosis(item.isSelected() && JCheckBoxMenuItem1.isSelected());
	}

	void JCheckBoxMenuItem1_actionPerformed(java.awt.event.ActionEvent event)
	{
		JCheckBoxMenuItem item = (JCheckBoxMenuItem) event.getSource(); // to do: code goes here.
		_PEOSInterface.setDiagnosis(item.isSelected() && JRadioButtonMenuItem2.isSelected());
		// to do: code goes here.
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusGained(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == JTree1)
				JTree1_focusGained(event);
			else if (object == JTable1)
				JTable1_focusGained(event);
		}
	}

	void JTree1_focusGained(java.awt.event.FocusEvent event)
	{
		if (curTreeSelection != null)
		{
			TreeSelectionModel selModel = JTree1.getSelectionModel();
			selModel.setSelectionPath(curTreeSelection);
			selModel.resetRowSelection();
		}
		curTableSelection = JTable1.getSelectedRow();
		JTable1.clearSelection();
		JDoneButton.setEnabled(false);
		JSuspendButton.setEnabled(false);
 		JResumeButton.setEnabled(false);
	}

	void JTable1_focusGained(java.awt.event.FocusEvent event)
	{
		int rc = JTable1.getRowCount();
		if (rc > 0)
		{
			if (curTableSelection >= rc)
				curTableSelection = 0;
			JTable1.getSelectionModel().setLeadSelectionIndex(curTableSelection);
		}	 
		if (!JTree1.getSelectionModel().isSelectionEmpty())
		{
			curTreeSelection = JTree1.getSelectionModel().getSelectionPath();
			JTree1.getSelectionModel().clearSelection();
		}
		else
			curTreeSelection = null;
		JRunButton.setEnabled(false);
	}


	class SymTreeSelection implements javax.swing.event.TreeSelectionListener
	{
		public void valueChanged(javax.swing.event.TreeSelectionEvent event)
		{
			Object object = event.getSource();
			if (object == JTree1)
				JTree1_valueChanged(event);
		}
	}

	class SymTableSelection implements javax.swing.event.ListSelectionListener
	{
		public void valueChanged(javax.swing.event.ListSelectionEvent event)
		{
			Object object = event.getSource();
			if (object == JTable1.getSelectionModel())
				JTable1_valueChanged(event);
		}
	}
	void JTable1_valueChanged(javax.swing.event.ListSelectionEvent event)
	{
	    if (event.getValueIsAdjusting())
	        return;
		int idx = JTable1.getSelectedRow();
		if (idx < 0)
		    return;
		String sts = (String) JTable1.getValueAt(idx, 0);
		if (sts.compareTo("E") == 0)
		{
			JDoneButton.setEnabled(false);
			JSuspendButton.setEnabled(false);
 			JResumeButton.setEnabled(false);
		}
		else
		{
			boolean bVal = (sts.compareTo("R") == 0);
			JDoneButton.setEnabled(true);
			JSuspendButton.setEnabled(bVal);
 			JResumeButton.setEnabled(!bVal);
		}
		String procID = (String) JTable1.getValueAt(idx, 1);
		showProperties(procID, 2);
	}

	void JTree1_valueChanged(javax.swing.event.TreeSelectionEvent event)
	{
        javax.swing.tree.TreePath tp = JTree1.getSelectionModel().getSelectionPath();
        if (tp == null)
            return;
		StringTokenizer st = new StringTokenizer(tp.toString(), ",][");
		boolean bVal = false;
		if (st.countTokens() > 2)
		{
			st.nextToken();						//the root
			String cat = st.nextToken();		//the catagory
			StringTokenizer st1 = new StringTokenizer(st.nextToken(), " ");		//the proc
			String procID = st1.nextToken();
			if (cat.indexOf("Available Processes") != -1)
			{
				bVal = true;
				showProperties(procID, 1);
			}
			if (cat.indexOf("Finished/Branched Process") != -1)
				showProperties(procID, 3);
			if (cat.indexOf("Errors in Processes") != -1)
				showProperties(procID, 4);
		}
		JRunButton.setEnabled(bVal);
	}

	PEOS_Process findProcinlLastRV(String key, String ProcID)
	{
		PEOS_Process ret = null;
		if (lastRetValue.containsKey(key))
		{
			Vector list = (Vector)lastRetValue.get(key);
			for (int i = 0; i < list.size(); i++)
			{   
			    PEOS_Process aProc = (PEOS_Process) list.elementAt(i);
				if (aProc.compareProcID(ProcID) == 0)
				{
					ret = (PEOS_Process) list.elementAt(i);
					break;
				}
			}
		}
		return ret;
	}

	void showProperties(String procID, int type)
	{
	    if (lastProcProperty.compareTo(procID) == 0)
	        return;
	    else
	        lastProcProperty = procID;
	        
		JTextArea1.setText("");
		JTextArea2.setText("");
		if ((type == 1) || (type == 2))
		{
			JTabbedPane1.setEnabledAt(0, true);
			JTextArea1.setText(procID);
			JTextArea1.append(":\n ");
			if (execPath.containsKey(procID))
			{
				String thePath = (String) execPath.getProperty(procID);
				JTextArea1.append(thePath);
			}
			else
				JTextArea1.append("No information about execution path.");
		}
		else if (type == 3)
		{
			JTabbedPane1.setEnabledAt(0, true);
			JTextArea1.setText(procID);
			JTextArea1.append(":\n ");
			if (doneExecPath != null)
				JTextArea1.append(doneExecPath);
			else
				JTextArea1.append("No information about execution path.");
			JTabbedPane1.setEnabledAt(1, false);
	    	JTabbedPane1.setSelectedIndex(0);
		}

		if ((type == 1) || (type == 2) || (type == 4))
		{
			JTabbedPane1.setEnabledAt(1, true);
			if (lastRetValue != null)
			{
				PEOS_Process theProc = findProcinlLastRV(retListNames[type-1], procID);
				if (theProc != null)
					JTextArea2.setText(theProc.getPMLString());
				else
					JTextArea2.setText("Cannot found the process.");
			}
			else
				JTextArea2.append("No processes information available.");
			if (type == 4)
			{
				JTabbedPane1.setEnabledAt(0, false);
				JTabbedPane1.setSelectedIndex(1);
			}
		}
		Dimension sz = JTabbedPane1.getSize();
		JTabbedPane1.paintImmediately(0, 0, sz.width, sz.height);
	}

	void addToExecPath(String procID, String taskID)
	{
		String thePath = null;
		if (execPath.containsKey(procID))
			thePath = new String(execPath.remove(procID) + "->" + taskID) ;
		else
			thePath = new String(taskID);
		execPath.put(procID, thePath);
	}

	void removeFromExecPath(String procID)
	{
		if (execPath.containsKey(procID))
		{
			doneExecPath =  execPath.remove(procID) + "-><FINISHED>";
		}
		else
			doneExecPath = null;
	}

}