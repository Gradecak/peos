# compiler:
CC =gcc

# verbosity
V= @

CFLAGS = -I../..

# keep track of dependencies automatically
.KEEP_STATE:

# lib
LIBRARY = libpeos.a
LIBS = $(LIBRARY) ../../pml/libpml.a 

CORE_LIBS = -ltcl 
LDFLAGS =

OPT_DEBUG=-g -Wall

# objects
OBJS = \
$(CORE_OBJS)

CORE_OBJS = \
tclinterp.o \
action.o \
events.o \
graph.o \
graph_engine.o \
process_table.o \
process.o \
resources.o \
predicate_evaluator.o \

# sources
SOURCES = $(OBJS:.o=.c)
HEADERS = $(wildcard *.h)

# build location
TREETOP= peos

all: build

build: shell lib peos 

peos: peos.o $(CORE_OBJS)
	${V}$(CC) $(OPT_DEBUG) $(LDFLAGS) -o $@ $^ $(CORE_LIBS) $(LIBS) 

daemon: enactment_daemon.o $(CORE_OBJS)
	${V}$(CC) $(OPT_DEBUG) $(LDFLAGS) -o $@ $^ $(CORE_LIBS) $(LIBS) -lreadline -lhistory -ltermcap

# Make the kernel library.
lib: $(LIBRARY)

$(LIBRARY): $(OBJS)
	${V}rm -f $@
	${V}ar cru $@ $(OBJS)
	${V}ranlib $@ || true

# Compile the program
shell: shell.o $(LIBRARY)
	${V}$(CC) $(OPT_DEBUG) $(LDFLAGS) -o $@ $< $(CORE_LIBS) $(LIBS) -lreadline -lhistory -ltermcap

# Programming aids.
xref:
	ctags -x $(SOURCES) > $@

tags:	TAGS ctags

TAGS:	$(SOURCES) $(HEADERS)
	etags $^

ctags:	$(SOURCES) $(HEADERS)
	ctags $^

cflow:
	cflow -I../.. $(SOURCES) > cflow

clean:
	rm -f *.o .depend libpeos.a

clobber: 
	rm -f proc_table.dat proc_table.dat.xml peos shell

# Dependencies.
#include .depend

# GNU Make will automatically maintain .depend.  This rule allows explicit
# recreation of dependencies.
depend: .depend

.depend: $(SOURCES)
	${V}$(CC) $(OPT_DEBUG) $(CFLAGS) -MM $^ > $@
	included .depend

.PHONY: clean clobber 
